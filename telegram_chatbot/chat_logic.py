import logging
import json
import aiohttp
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã)
TELEGRAM_BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
YANDEX_API_KEY = "YOUR_YANDEX_API_KEY"  # API –∫–ª—é—á –æ—Ç –Ø–Ω–¥–µ–∫—Å Cloud
YANDEX_FOLDER_ID = "YOUR_FOLDER_ID"  # ID –ø–∞–ø–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å Cloud

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é –ë–î)
PRODUCTS_DB = {
    "skin_care": [
        {
            "name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ —Å –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥–æ–º –∏ —Ü–∏–Ω–∫–æ–º",
            "description": "–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∞–ª—å–Ω—ã—Ö –∂–µ–ª–µ–∑, —É–º–µ–Ω—å—à–∞–µ—Ç –∂–∏—Ä–Ω–æ—Å—Ç—å –∫–æ–∂–∏",
            "price": "1500 —Ä—É–±",
            "links": {
                "site": "https://yoursite.com/niacinamide",
                "ozon": "https://ozon.ru/product/niacinamide",
                "wb": "https://wildberries.ru/catalog/niacinamide"
            },
            "keywords": ["–∂–∏—Ä–Ω–∞—è –∫–æ–∂–∞", "–ø–æ—Ä—ã", "—Å–µ–±—É–º", "–ø—Ä—ã—â–∏", "–∞–∫–Ω–µ"]
        },
        {
            "name": "–ì–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞",
            "description": "–£–≤–ª–∞–∂–Ω—è–µ—Ç –∫–æ–∂—É, –±–æ—Ä–µ—Ç—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å—é",
            "price": "1200 —Ä—É–±",
            "links": {
                "site": "https://yoursite.com/hyaluronic",
                "ozon": "https://ozon.ru/product/hyaluronic",
                "wb": "https://wildberries.ru/catalog/hyaluronic"
            },
            "keywords": ["—Å—É—Ö–æ—Å—Ç—å", "—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–º–æ—Ä—â–∏–Ω—ã", "—Å—Ç—Ä–µ—Å—Å"]
        }
    ],
    "energy": [
        {
            "name": "–í–∏—Ç–∞–º–∏–Ω C",
            "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ —ç–Ω–µ—Ä–≥–∏—é, —É–ª—É—á—à–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏",
            "price": "800 —Ä—É–±",
            "links": {
                "site": "https://yoursite.com/vitamin-c",
                "ozon": "https://ozon.ru/product/vitamin-c",
                "wb": "https://wildberries.ru/catalog/vitamin-c"
            },
            "keywords": ["—É—Å—Ç–∞–ª–æ—Å—Ç—å", "–∏–º–º—É–Ω–∏—Ç–µ—Ç", "—ç–Ω–µ—Ä–≥–∏—è", "–ø—Ä–æ—Å—Ç—É–¥–∞"]
        },
        {
            "name": "5-–ù–¢–† (5-–≥–∏–¥—Ä–æ–∫—Å–∏—Ç—Ä–∏–ø—Ç–æ—Ñ–∞–Ω)",
            "description": "–£–ª—É—á—à–∞–µ—Ç —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏",
            "price": "2000 —Ä—É–±",
            "links": {
                "site": "https://yoursite.com/5htp",
                "ozon": "https://ozon.ru/product/5htp",
                "wb": "https://wildberries.ru/catalog/5htp"
            },
            "keywords": ["–¥–µ–ø—Ä–µ—Å—Å–∏—è", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Å–æ–Ω", "—ç–Ω–µ—Ä–≥–∏—è", "—É—Å—Ç–∞–ª–æ—Å—Ç—å"]
        }
    ],
    "digestion": [
        {
            "name": "–ü—Ä–æ–±–∏–æ—Ç–∏–∫ + –ü—Ä–µ–±–∏–æ—Ç–∏–∫",
            "description": "–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ —É–ª—É—á—à–∞–µ—Ç –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ",
            "price": "1700 —Ä—É–±",
            "links": {
                "site": "https://yoursite.com/probiotics",
                "ozon": "https://ozon.ru/product/probiotics",
                "wb": "https://wildberries.ru/catalog/probiotics"
            },
            "keywords": ["–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–∂–∏–≤–æ—Ç", "–º–µ—Ç–∞–±–æ–ª–∏–∑–º", "–≤–∑–¥—É—Ç–∏–µ", "–∫–∏—à–µ—á–Ω–∏–∫"]
        }
    ]
}


class YandexGPT:
    def __init__(self, api_key: str, folder_id: str):
        self.api_key = api_key
        self.folder_id = folder_id
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    async def generate_response(self, user_message: str, products_context: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è Yandex GPT"""

        system_prompt = f"""–¢—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ë–ê–î–∞–º –∏ –∑–¥–æ—Ä–æ–≤—å—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞
2. –î–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
3. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:
{products_context}

–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç:
- –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
- –ö—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."""

        payload = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.3,
                "maxTokens": 2000
            },
            "messages": [
                {
                    "role": "system",
                    "text": system_prompt
                },
                {
                    "role": "user",
                    "text": user_message
                }
            ]
        }

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Api-Key {self.api_key}"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        self.base_url,
                        headers=headers,
                        json=payload,
                        timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result['result']['alternatives'][0]['message']['text']
                    else:
                        logger.error(f"Yandex API error: {response.status}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Error calling Yandex API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def find_relevant_products(user_message: str) -> list:
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    user_message_lower = user_message.lower()
    relevant_products = []

    for category, products in PRODUCTS_DB.items():
        for product in products:
            for keyword in product["keywords"]:
                if keyword.lower() in user_message_lower:
                    if product not in relevant_products:
                        relevant_products.append(product)
                    break

    return relevant_products


def format_products_context(products: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ò–ò"""
    if not products:
        return "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

    context = ""
    for i, product in enumerate(products, 1):
        context += f"{i}. {product['name']} - {product['description']} ({product['price']})\n"

    return context


def format_product_recommendation(product: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    links_text = " | ".join([
        f"[{name.upper()}]({url})"
        for name, url in product["links"].items()
    ])

    return f"**{product['name']}**\n{product['description']}\nüí∞ {product['price']}\nüîó {links_text}\n"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
yandex_gpt = YandexGPT(YANDEX_API_KEY, YANDEX_FOLDER_ID)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """
üåø **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ë–ê–î–∞–º!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–±–∞–≤–∫–∏ –∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è.

üìù **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º
2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å
3. –ü—Ä–µ–¥–ª–æ–∂—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞

üí¨ **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç!**

–ù–∞–ø—Ä–∏–º–µ—Ä: "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–∂–µ–π –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"
    """

    await update.message.reply_text(
        welcome_message,
        parse_mode='Markdown'
    )


# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     user_message = update.message.text
#     user_id = update.effective_user.id
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
#     processing_msg = await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
#
#     try:
#         # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
#         relevant_products = find_relevant_products(user_message)
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
#         products_context = format_products_context(relevant_products)
#
#         # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
#         ai_response = await yandex_gpt.generate_response(user_message, products_context)
#
#         # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
#         await processing_msg.delete()
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
#         await update.message.reply_text(
#             ai_response,
#             parse_mode='Markdown'
#         )
#
#         # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
#         if relevant_products:
#             products_message = "üõçÔ∏è **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
#             for product in relevant_products[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
#                 products_message += format_product_recommendation(product) + "\n"
#
#             await update.message.reply_text(
#                 products_message,
#                 parse_mode='Markdown',
#                 disable_web_page_preview=True
#             )
#
#         # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å
#         keyboard = [
#             [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="new_question")],
#             [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º", callback_data="contact")]
#         ]
#         reply_markup = InlineKeyboardMarkup(keyboard)
#
#         await update.message.reply_text(
#             "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
#             reply_markup=reply_markup
#         )
#
#     except Exception as e:
#         logger.error(f"Error handling message: {e}")
#         await processing_msg.edit_text(
#             "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É."
#         )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞"""
    user_message = update.message.text

    simple_response = f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '{user_message}'"

    await update.message.reply_text(simple_response)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "new_question":
        await query.edit_message_text("üí¨ –ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ!")
    elif query.data == "contact":
        contact_info = """
üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º:**

üåê –°–∞–π—Ç: https://yourcompany.com
üìß Email: info@yourcompany.com  
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üí¨ Telegram: @your_support_bot

‚è∞ –†–∞–±–æ—Ç–∞–µ–º: –ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)
        """
        await query.edit_message_text(
            contact_info,
            parse_mode='Markdown'
        )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
